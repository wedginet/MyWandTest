@page "/scan"
@using MyWandTest.Services
@using MyWandTest.Models
@using System.Text

@inject IBluetoothService BluetoothService
@inject IJSRuntime JS
@inject SessionService SessionService

<h3>Scan Input</h3>

<p><strong>Connection:</strong> @connectionStatus</p>

<input @bind="currentInput" @bind:event="oninput" @ref="scanInputRef" />
<button @onclick="AddToList">Add</button>

<div style="display: flex; gap: 20px; margin-top: 20px;">
    <div style="flex: 1;">
        <h4>Raw Scans</h4>
        <div style="height: 200px; overflow-y: auto; border: 1px solid gray; padding: 5px;">
            <ul>
                @foreach (var item in scannedItems)
                {
                    <li>@item</li>
                }
            </ul>
        </div>
    </div>

    <div style="flex: 1;">
        <h4>Actual Tags</h4>
        <div style="height: 200px; overflow-y: auto; border: 1px solid gray; padding: 5px;">
            <ul>
                @foreach (var tag in actualTags)
                {
                    <li>@tag</li>
                }
            </ul>
        </div>
    </div>
</div>

@if (showPopup)
{
    <div class="popup">
        <div class="popup-content">
            <h5>New Tag Found</h5>
            <p>@currentTag</p>
            <button @onclick="ClosePopup">Save</button>
        </div>
    </div>
}

<audio id="successSound" src="css/sounds/beep.mp3" preload="auto"></audio>

@code {
    string currentInput = "";
    private List<string> scannedItems => SessionService.RawScans;
    private List<string> actualTags => SessionService.ParsedScans;
    string currentTag = "";
    bool showPopup = false;
    bool isFirstRender = true;
    string connectionStatus = "Connecting...";

    ElementReference scanInputRef;
    private StringBuilder scanBuffer = new();

    protected override async Task OnInitializedAsync()
    {
        BluetoothService.DataReceived += OnDataReceived;
        BluetoothService.ConnectionChanged += OnConnectionChanged;

        if (!BluetoothService.IsConnected)
        {
            var reconnected = await BluetoothService.TryReconnectLastDeviceAsync();
            connectionStatus = reconnected != null
                ? $"Reconnected to: {reconnected.Name}"
                : "No device connected";
        }
        else
        {
            connectionStatus = $"Connected to: {BluetoothService.ConnectedDevice?.Name}";
        }
    }

    private async void OnConnectionChanged(object? sender, bool isConnected)
    {
        if (!isConnected)
        {
            connectionStatus = "Disconnected. Trying to reconnect...";
            StateHasChanged();

            var retry = await BluetoothService.TryReconnectLastDeviceAsync();
            connectionStatus = retry != null
                ? $"Auto-reconnected to: {retry.Name}"
                : "Failed to reconnect";
        }
        else
        {
            connectionStatus = $"Connected to: {BluetoothService.ConnectedDevice?.Name}";
        }

        StateHasChanged();
    }

    private void OnDataReceived(object? sender, string value)
    {
        InvokeAsync(() =>
        {
            SessionService.AddRaw(value);
            scanBuffer.Append(value);

            string digits = new string(scanBuffer.ToString().Where(char.IsDigit).ToArray());

            while (digits.Length >= 15)
            {
                var tag = digits.Substring(0, 15);

                if (!actualTags.Contains(tag))
                {
                    SessionService.AddParsed(tag);
                    scanBuffer.Clear();

                    if (!showPopup)
                    {
                        currentTag = tag;
                        showPopup = true;
                        PlaySuccessSound();
                        TriggerVibration();

                        StateHasChanged();
                    }
                }

                int index = IndexOfDigits(scanBuffer.ToString(), tag);
                if (index >= 0)
                {
                    scanBuffer.Remove(0, index + tag.Length);
                    digits = new string(scanBuffer.ToString().Where(char.IsDigit).ToArray());
                }
                else
                {
                    break;
                }
            }

            StateHasChanged();
        });
    }

    private int IndexOfDigits(string input, string digits)
    {
        var digitIndex = 0;
        for (int i = 0; i < input.Length; i++)
        {
            if (char.IsDigit(input[i]))
            {
                if (input[i] != digits[digitIndex])
                    return -1;

                digitIndex++;
                if (digitIndex == digits.Length)
                    return i - digits.Length + 1;
            }
        }
        return -1;
    }

    private void AddToList()
    {
        if (!string.IsNullOrWhiteSpace(currentInput))
        {
            if (!actualTags.Contains(currentInput))
            {
                SessionService.AddParsed(currentInput);

                if (!showPopup)
                {
                    currentTag = currentInput;
                    showPopup = true;
                    PlaySuccessSound();
                    TriggerVibration();

                    StateHasChanged();
                }
            }
            currentInput = "";
        }
    }

    private async void ClosePopup()
    {
        showPopup = false;
        StateHasChanged();
        await Task.Delay(100);
        await scanInputRef.FocusAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && isFirstRender)
        {
            isFirstRender = false;
            await scanInputRef.FocusAsync();
        }
    }

    private async void PlaySuccessSound()
    {
        await JS.InvokeVoidAsync("playSuccessSound");
    }

    private async void TriggerVibration()
    {
        await JS.InvokeVoidAsync("vibrateDevice");
    }
}
