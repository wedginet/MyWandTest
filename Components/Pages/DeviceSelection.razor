@page "/deviceselection"
@using MyWandTest.Services
@using MyWandTest.Models

@inject IBluetoothService BluetoothService
@inject NavigationManager Nav

<h1>Select Scanner Device</h1>

@if (showError)
{
    <div class="popup-overlay">
        <div class="popup-error">
            <h4>Error</h4>
            <p>@errorMessage</p>
            <button @onclick="ClosePopup">Close</button>
        </div>
    </div>
}

<select @onchange="OnDeviceSelected">
    <option value="">-- Select Device --</option>
    @foreach (var device in devices)
    {
        <option value="@device.Id" selected="@IsSelected(device.Id)">
            @(BluetoothService.ConnectedDevice?.Id == device.Id ? "[Connected] " : "") @device.Name
        </option>
    }
</select>

<button @onclick="ConnectToDevice" disabled="@string.IsNullOrEmpty(selectedDeviceId)">Connect</button>

<p>@status</p>

@code {
    List<BluetoothDevice> devices = new();
    string selectedDeviceId = "";
    string status = "";
    private bool showError = false;
    private string errorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await MainThread.InvokeOnMainThreadAsync(async () =>
            {
                var granted = await PermissionsHelper.RequestBluetoothPermissionsAsync();
                if (!granted)
                {
                    status = "Bluetooth permissions denied.";
                    return;
                }

                var paired = await BluetoothService.GetPairedDevicesAsync();
                devices = paired.ToList();

                var lastDeviceId = BluetoothStorage.GetLastDeviceId();
                selectedDeviceId = BluetoothService.ConnectedDevice?.Id ?? lastDeviceId ?? "";
            });
        }
        catch (Exception ex)
        {
            ShowError("Bluetooth Init Failed: " + ex.Message);
        }
    }

    private void OnDeviceSelected(ChangeEventArgs e)
    {
        selectedDeviceId = e.Value?.ToString() ?? "";
    }

    private async Task ConnectToDevice()
    {
        status = "Connecting...";
        try
        {
            var selectedDevice = devices.FirstOrDefault(d => d.Id == selectedDeviceId);
            if (selectedDevice == null)
            {
                ShowError("Device not found.");
                return;
            }

            if (BluetoothService.IsConnected &&
                BluetoothService.ConnectedDevice?.Id != selectedDevice.Id)
            {
                await BluetoothService.DisconnectAsync();
            }

            var result = await BluetoothService.ConnectToDeviceAsync(selectedDevice);
            status = result ? $"Connected to {selectedDevice.Name}" : "Failed to connect";

            if (result)
            {
                BluetoothStorage.SaveLastDeviceId(selectedDevice.Id);
                Nav.NavigateTo("/scan");
            }
        }
        catch (Exception ex)
        {
            ShowError("Connection Failed: " + ex.Message);
        }
    }

    private bool IsSelected(string deviceId)
    {
        return selectedDeviceId == deviceId;
    }

    private void ShowError(string message)
    {
        errorMessage = message;
        showError = true;
    }

    private void ClosePopup()
    {
        showError = false;
    }
}
